local lush = require('lush')
local hsl = lush.hsl
-- local colors = require('lush_theme.colors')

-- LSP/Linters mistakenly show `undefined global` errors in the spec, they may
-- support an annotation like the following. Consult your server documentation.
---@diagnostic disable: undefined-global
local M = lush(function(injected_functions)
  local sym = injected_functions.sym

  local colors = {
    black          = hsl("#000000"),
    dark1          = hsl("#262626"),
    dark2          = hsl("#3c3836"),
    dark3          = hsl("#504945"),
    dark4          = hsl("#665c54"),
    light1         = hsl("#ebdbb2"),
    light2         = hsl("#bdae93"),
    light3         = hsl("#a89984"),
    light4         = hsl("#928374"),
    red            = hsl("#fb4934"),
    -- green          = hsl("#b8bb26"),
    green          = hsl("#acbf56"),
    green2          = hsl("#acbf56").darken(20),
    -- yellow         = hsl("#fabd2f"),
    yellow        = hsl("#fabd2f").darken(10),
    -- blue           = hsl("#83a598").lighten(20),
    blue           = hsl("#9ab6ac"),
    blue2           = hsl("#55a1bf"),
    purple         = hsl("#b38afe"),
    purple2         = hsl("#8c56f0"),
    aqua           = hsl("#24bbc0").darken(10),
    orange         = hsl("#fe8019"),
    faded_red      = hsl("#9d0006"),
    faded_green    = hsl("#79740e"),
    faded_yellow   = hsl("#b57614"),
    faded_blue     = hsl("#076678"),
    faded_purple   = hsl("#8f3f71"),
    faded_aqua     = hsl("#427b58"),
    faded_orange   = hsl("#af3a03"),
    shaded_red     = hsl(6, 66, 16),
    shaded_green   = hsl(90, 66, 16),
    shaded_yellow  = hsl(58, 66, 16),
    shaded_blue    = hsl(200, 66, 16),
    shaded_purple  = hsl(310, 66, 16),
    shaded_aqua    = hsl(176, 66, 16),
    shaded_orange  = hsl(34, 66, 16),
  }

  -- neovim terminal mode colors
  local function set_terminal_colors(colors)
    vim.g.terminal_color_0 = colors.bg0
    vim.g.terminal_color_8 = colors.light4
    vim.g.terminal_color_1 = colors.red
    vim.g.terminal_color_9 = colors.red
    vim.g.terminal_color_2 = colors.green
    vim.g.terminal_color_10 = colors.green
    vim.g.terminal_color_3 = colors.yellow
    vim.g.terminal_color_11 = colors.yellow
    vim.g.terminal_color_4 = colors.blue
    vim.g.terminal_color_12 = colors.blue
    vim.g.terminal_color_5 = colors.purple
    vim.g.terminal_color_13 = colors.purple
    vim.g.terminal_color_6 = colors.aqua
    vim.g.terminal_color_14 = colors.aqua
    vim.g.terminal_color_7 = colors.fg4
    vim.g.terminal_color_15 = colors.fg1
  end

  return {
    Normal                 { fg = colors.light1, bg = colors.dark1 },
    NormalFloat            { fg = colors.light1, bg = colors.dark2 },
    NormalNC               { Normal },
    CursorLine             { bg = colors.dark1 },
    CursorColumn           { CursorLine },
    TabLineTabBg           { bg = colors.green, gui = "bold" },
    TabLineTabFg           { fg = colors.green, gui = "bold" },
    TabLineFill            { fg = colors.light1, bg = colors.dark4 },
    TabLineSel             { fg = colors.black, bg = colors.light1, gui = "bold" },
    TabLine                { TabLineFill },
    MatchParen             { fg = colors.black, bg = colors.yellow, gui = "bold" },
    ColorColumn            { bg = colors.dark2 },
    Conceal                { fg = colors.blue },
    CursorLineNr           { fg = colors.yellow, bg = colors.dark1 },
    NonText                { fg = colors.dark4 },
    SpecialKey             { fg = colors.light3 },
    Visual                 { bg = colors.dark2 },
    VisualNOS              { Visual },
    Search                 { fg = colors.yellow, bg = colors.black, gui = "reverse" },
    IncSearch              { fg = colors.orange, bg = colors.black, gui = "reverse" },
    CurSearch              { IncSearch },
    QuickFixLine           { fg = colors.black, bg = colors.yellow, gui = "bold" },
    Underlined             { fg = colors.blue, gui = "underline" },
    StatusLine             { fg = colors.dark1, bg = colors.light1, gui = "reverse" },
    StatusLineNC           { fg = colors.dark1, bg = colors.light3, gui = "reverse" },
    StatusLine2            { fg = colors.light1, bg = colors.dark3 },
    StatusLineModeNormal   { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModePending  { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeInsert   { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeVisual   { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeVLine    { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeVBlock   { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeSelect   { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeSLine    { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeSBlock   { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeReplace  { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeVReplace { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeCommand  { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeEx       { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeShell    { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineModeTerminal { gui = "bold", fg = colors.light1, bg = colors.dark4 },
    StatusLineGitAdd       { fg = colors.green, bg = colors.dark3 },
    StatusLineGitChange    { fg = colors.yellow, bg = colors.dark3 },
    StatusLineGitDelete    { fg = colors.red, bg = colors.dark3 },
    StatusLineError        { fg = colors.black, bg = colors.red },
    StatusLineWarn         { fg = colors.black, bg = colors.yellow },
    StatusLineInfo         { fg = colors.black, bg = colors.blue },
    StatusLineHint         { fg = colors.black, bg = colors.aqua },
    WinBar                 { fg = colors.light1 },
    WinBarNC               { fg = colors.light3 },
    WinSeparator           { fg = colors.dark4, bg = colors.dark1 },
    -- WinBarError            { gui = "bold", fg = colors.black, bg = colors.red },
    WinBarError            { gui = "bold", fg = colors.light1, bg = colors.faded_red },
    -- WinBarWarn             { gui = "bold", fg = colors.black, bg = colors.yellow },
    WinBarWarn             { gui = "bold", fg = colors.light1, bg = colors.faded_yellow },
    -- WinBarInfo             { gui = "bold", fg = colors.black, bg = colors.blue },
    WinBarInfo             { gui = "bold", fg = colors.light1, bg = colors.faded_blue },
    -- WinBarHint             { gui = "bold", fg = colors.black, bg = colors.aqua },
    WinBarHint             { gui = "bold", fg = colors.light1, bg = colors.faded_blue },
    WildMenu               { fg = colors.blue, bg = colors.dark2, gui = "bold" },
    Directory              { fg = colors.blue, gui = "bold" },
    Title                  { fg = colors.green, gui = "bold" },
    ErrorMsg               { fg = colors.red, bg = colors.shaded_red },
    MoreMsg                { fg = colors.yellow, gui = "bold" },
    ModeMsg                { fg = colors.yellow, gui = "bold" },
    Question               { fg = colors.orange, gui = "bold" },
    WarningMsg             { fg = colors.red, gui = "bold" },
    LineNr                 { fg = colors.light4 },
    SignColumn             { bg = colors.dark1 },
    Folded                 { fg = colors.light4, bg = colors.dark2 },
    FoldColumn             { fg = colors.light4, bg = colors.dark1 },
    Special                { fg = colors.purple },
    -- Comment                { fg = colors.light4 },
    Comment                { fg = colors.blue2, gui = "italic" },
    Todo                   { fg = colors.light1, bold = config.bold },
    Done                   { fg = colors.purple, bold = config.bold },
    Error                  { fg = colors.red },
    Statement              { fg = colors.blue },
    Conditional            { fg = colors.blue },
    Repeat                 { fg = colors.blue },
    Label                  { fg = colors.blue },
    Exception              { fg = colors.red },
    -- Operator               { fg = colors.blue },
    Operator               { fg = colors.light3 },
    -- Keyword                { fg = colors.blue },
    Keyword                { fg = colors.light3 },
    Identifier             { fg = colors.light1 },
    Function               { fg = colors.blue },
    PreProc                { fg = colors.blue },
    Include                { fg = colors.blue },
    Define                 { fg = colors.blue },
    Macro                  { fg = colors.blue },
    PreCondit              { fg = colors.blue },
    Constant               { fg = colors.purple },
    -- Constant               { fg = colors.blue },
    Character              { fg = colors.purple },
    -- Character              { fg = colors.blue },
    String                 { fg = colors.green },
    Boolean                { fg = colors.purple },
    -- Boolean                { fg = colors.blue },
    Number                 { fg = colors.purple },
    -- Number                 { fg = colors.blue },
    Float                  { fg = colors.purple },
    -- Float                  { fg = colors.blue },
    Type                   { fg = colors.yellow },
    StorageClass           { fg = colors.yellow },
    -- Structure              { fg = colors.aqua },
    Structure              { fg = colors.yellow },
    Typedef                { fg = colors.yellow },
    Pmenu                  { fg = colors.light1, bg = colors.dark2 },
    PmenuSel               { fg = colors.dark3, bg = colors.blue, gui = "bold" },
    PmenuSbar              { bg = colors.dark2 },
    PmenuThumb             { bg = colors.dark3 },
    -- DiffDelete             { bg = colors.shaded_red },
    -- DiffAdd                { bg = colors.shaded_green },
    -- DiffChange             { bg = colors.shaded_aqua },
    -- DiffText               { bg = colors.shaded_yellow },
    DiffDelete             { fg = colors.red, bg = colors.shaded_red },
    DiffAdd                { fg = colors.green, bg = colors.shaded_green },
    DiffChange             { fg = colors.aqua, bg = colors.shaded_aqua },
    DiffText               { fg = colors.yellow, bg = colors.shaded_yellow },
    diffAdded              { fg = colors.green },
    diffRemoved            { fg = colors.red },
    diffChanged            { fg = colors.aqua },
    diffFile               { fg = colors.orange },
    diffNewFile            { fg = colors.yellow },
    diffOldFile            { fg = colors.orange },
    diffLine               { fg = colors.blue },
    diffIndexLine          { diffChanged },
    SpellCap               { gui = "underline", guisp = colors.blue },
    SpellBad               { gui = "underline", guisp = colors.red },
    SpellLocal             { gui = "underline", guisp = colors.aqua },
    SpellRare              { gui = "underline", guisp = colors.purple },
    Whitespace             { fg = colors.dark4 },
    SpecialChar            { fg = colors.yellow }, --   Special character in a constant
    Delimiter              { fg = colors.purple }, --   Character that needs attention
    Debug                  { fg = colors.red }, --   Debugging statements
    SpecialComment         { fg = colors.green }, --   Special things inside a comment (e.g. '\n')
    Tag                    { fg = colors.aqua }, --   You can use CTRL-] on this

    -- Cursor state colors
    Cursor                 { fg = colors.black, bg = colors.light1 },
    ICursor                { fg = colors.black, bg = colors.light1 },
    VCursor                { fg = colors.black, bg = colors.blue },
    RCursor                { fg = colors.black, bg = colors.red },

    -- LSP Diagnostic
    DiagnosticError             { fg = colors.red },
    DiagnosticSignError         { fg = colors.red, bg = colors.dark1 },
    -- DiagnosticUnderlineError    { fg = colors.red, bg = colors.shaded_red },
    DiagnosticUnderlineError    { fg = colors.light1, bg = colors.faded_red },
    DiagnosticWarn              { fg = colors.yellow },
    DiagnosticSignWarn          { fg = colors.yellow, bg = colors.dark1 },
    -- DiagnosticUnderlineWarn     { fg = colors.yellow, bg = colors.shaded_yellow },
    DiagnosticUnderlineWarn     { fg = colors.light1, bg = colors.faded_yellow },
    DiagnosticInfo              { fg = colors.blue },
    DiagnosticSignInfo          { fg = colors.blue, bg = colors.dark1 },
    -- DiagnosticUnderlineInfo     { fg = colors.blue, bg = colors.shaded_blue },
    DiagnosticUnderlineInfo     { fg = colors.light1, bg = colors.faded_blue },
    DiagnosticHint              { fg = colors.aqua },
    DiagnosticSignHint          { fg = colors.aqua, bg = colors.dark1 },
    -- DiagnosticUnderlineHint     { fg = colors.aqua, bg = colors.shaded_aqua },
    DiagnosticUnderlineHint     { fg = colors.light1, bg = colors.faded_blue },
    -- DiagnosticUnnecessary       { fg = colors.aqua, bg = colors.shaded_aqua },
    DiagnosticUnnecessary       { fg = colors.light1, bg = colors.faded_blue },
    DiagnosticFloatingError     { fg = colors.red },
    DiagnosticFloatingWarn      { fg = colors.orange },
    DiagnosticFloatingInfo      { fg = colors.blue },
    DiagnosticFloatingHint      { fg = colors.aqua },
    DiagnosticVirtualTextError  { fg = colors.red },
    DiagnosticVirtualTextWarn   { fg = colors.yellow },
    DiagnosticVirtualTextInfo   { fg = colors.blue },
    DiagnosticVirtualTextHint   { fg = colors.aqua },
    LspReferenceRead            { fg = colors.yellow, gui = "bold" },
    LspReferenceText            { fg = colors.yellow, gui = "bold" },
    LspReferenceWrite           { fg = colors.orange, gui = "bold" },
    LspCodeLens                 { fg = colors.light4 },
    LspSignatureActiveParameter { Search },

    -- semantic token
    -- adapted from https://github.com/jdrouhard/neovim/blob/9f035559defd9d575f37fd825954610065d9cf96/src/nvim/highlight_group.c#L267
    sym"@class"         { Special },
    sym"@decorator"     { Identifier },
    sym"@enum"          { Special },
    sym"@enumMember"    { Constant },
    sym"@event"         { Identifier },
    sym"@interface"     { Identifier },
    sym"@modifier"      { Identifier },
    sym"@regexp"        { SpecialChar },
    sym"@struct"        { Special },
    sym"@typeParameter" { Type },

    -- nvim-treesitter (0.8 compat)
    -- Adapted from https://github.com/nvim-treesitter/nvim-treesitter/commit/42ab95d5e11f247c6f0c8f5181b02e816caa4a4f#commitcomment-87014462
    sym"@annotation"            { Operator },
    sym"@comment"               { Comment },
    sym"@none"                  { bg = "NONE", fg = "NONE" },
    sym"@preproc"               { PreProc },
    sym"@define"                { Define },
    sym"@operator"              { Operator },
    sym"@punctuation.delimiter" { Operator },
    sym"@punctuation.bracket"   { Operator },
    sym"@punctuation.special"   { Operator },
    sym"@string"                { String },
    sym"@string.regex"          { String },
    sym"@string.escape"         { SpecialChar },
    sym"@string.special"        { SpecialChar },
    sym"@character"             { Character },
    sym"@character.special"     { SpecialChar },
    sym"@boolean"               { Boolean },
    sym"@number"                { Number },
    sym"@float"                 { Float },
    sym"@function"              { Function },
    sym"@function.call"         { Function },
    sym"@function.builtin"      { Special },
    sym"@function.macro"        { Macro },
    sym"@method"                { Function },
    sym"@method.call"           { Function },
    sym"@constructor"           { Special },
    sym"@parameter"             { Identifier },
    sym"@keyword"               { Keyword },
    sym"@keyword.function"      { Keyword },
    sym"@keyword.return"        { Keyword },
    sym"@keyword.operator"      { Keyword },
    sym"@conditional"           { Conditional },
    sym"@repeat"                { Repeat },
    sym"@debug"                 { Debug },
    sym"@label"                 { Label },
    sym"@include"               { Include },
    sym"@exception"             { Exception },
    sym"@type"                  { Type },
    sym"@type.builtin"          { Type },
    sym"@type.qualifier"        { Type },
    sym"@type.definition"       { Typedef },
    sym"@storageclass"          { StorageClass },
    sym"@attribute"             { PreProc },
    sym"@field"                 { Identifier },
    sym"@property"              { Identifier },
    sym"@variable"              { fg = colors.light1 },
    sym"@variable.builtin"      { Special },
    sym"@constant"              { Constant },
    sym"@constant.builtin"      { Special },
    sym"@constant.macro"        { Define },
    sym"@namespace"             { fg = colors.light1 },
    sym"@symbol"                { Identifier },
    sym"@text"                  { fg = colors.light1 },
    sym"@text.title"            { Title },
    sym"@text.literal"          { String },
    sym"@text.uri"              { Underlined },
    sym"@text.math"             { Special },
    sym"@text.environment"      { Macro },
    sym"@text.environment.name" { Type },
    sym"@text.reference"        { Constant },
    sym"@text.todo"             { Todo },
    sym"@text.todo.unchecked"   { Todo },
    sym"@text.todo.checked"     { Done },
    sym"@text.note"             { SpecialComment },
    sym"@text.warning"          { WarningMsg },
    sym"@text.danger"           { ErrorMsg },
    sym"@text.diff.add"         { diffAdded },
    sym"@text.diff.delete"      { diffRemoved },
    sym"@tag"                   { fg = colors.light1 },
    sym"@tag.builtin"           { fg = colors.light1 },
    sym"@tag.attribute"         { fg = colors.blue },
    sym"@tag.delimiter"         { fg = colors.light3 },

    -- nvim-treesitter (0.8 overrides)
    sym"@text.strong" { gui = "bold" },
    sym"@text.strike" { gui = "strikethrough" },
    sym"@text.emphasis" { gui = "NONE" },
    sym"@text.underline" { gui = "underline" },

    -- gitcommit
    gitcommitSelectedFile  { fg = colors.green },
    gitcommitDiscardedFile { fg = colors.red },

    -- gitsigns.nvim
    GitSignsAdd    { fg = colors.green, bg = colors.dark1 },
    GitSignsChange { fg = colors.blue, bg = colors.dark1 },
    GitSignsDelete { fg = colors.red, bg = colors.dark1 },

    -- nvim-tree
    NvimTreeNormalFloat  { Normal },
    NvimTreeWinSeparator { fg = colors.light1 },
    NvimTreeSymlink      { fg = colors.aqua },
    NvimTreeRootFolder   { fg = colors.purple, gui = "bold" },
    NvimTreeFolderIcon   { fg = colors.blue, gui = "bold" },
    NvimTreeFileIcon     { fg = colors.light1 },
    NvimTreeExecFile     { fg = colors.green, gui = "bold" },
    NvimTreeOpenedFile   { fg = colors.red, gui = "bold" },
    NvimTreeSpecialFile  { fg = colors.yellow, gui = "bold,underline" },
    NvimTreeImageFile    { fg = colors.purple },
    NvimTreeIndentMarker { fg = colors.dark4 },
    NvimTreeGitDirty     { fg = colors.yellow },
    NvimTreeGitStaged    { fg = colors.yellow },
    NvimTreeGitMerge     { fg = colors.purple },
    NvimTreeGitRenamed   { fg = colors.purple },
    NvimTreeGitNew       { fg = colors.yellow },
    NvimTreeGitDeleted   { fg = colors.red },
    NvimTreeWindowPicker { bg = "#4493c8", fg = "#000000" }, -- swap-split always linked to this color group

    -- Oil
    OilDir             { fg = colors.blue, gui = "bold" },
    OilCopy            { fg = colors.yellow, gui = "bold" },
    OilMove            { fg = colors.orange, gui = "bold" },
    OilPurge           { fg = colors.red, gui = "bold" },
    OilTrash           { fg = colors.red, gui = "bold" },
    OilDelete          { fg = colors.red, gui = "bold" },
    OilChange          { fg = colors.purple, gui = "bold" },
    OilCreate          { fg = colors.green, gui = "bold" },
    -- OilSocket          { fg = colors.blue, gui = "bold" },
    -- OilDirIcon         { fg = colors.blue, gui = "bold" },
    -- OilRestore         { fg = colors.blue, gui = "bold" },
    OilLinkTarget      { fg = colors.light3 },
    OilTrashSourcePath { fg = colors.light3 },

    -- termdebug
    debugPC         { bg = colors.faded_blue },
    debugBreakpoint { fg = colors.red, bg = colors.dark1 },

    -- vim-startify
    StartifyBracket { fg = colors.light2 },
    StartifyFile    { fg = colors.light1 },
    StartifyNumber  { fg = colors.blue },
    StartifyPath    { fg = colors.light4 },
    StartifySlash   { fg = colors.light4 },
    StartifySection { fg = colors.yellow },
    StartifySpecial { fg = colors.dark3 },
    StartifyHeader  { fg = colors.orange },
    StartifyFooter  { fg = colors.dark3 },
    StartifyVar     { StartifyPath },
    StartifySelect  { Title },

    -- vim-dirvish
    DirvishPathTail { fg = colors.aqua },
    DirvishArg      { fg = colors.yellow },

    -- netrw
    netrwDir      { fg = colors.aqua },
    netrwClassify { fg = colors.aqua },
    netrwLink     { fg = colors.light4 },
    netrwSymLink  { fg = colors.light1 },
    netrwExe      { fg = colors.yellow },
    netrwComment  { fg = colors.light4 },
    netrwList     { fg = colors.blue },
    netrwHelpCmd  { fg = colors.aqua },
    netrwCmdSep   { fg = colors.light2 },
    netrwVersion  { fg = colors.green },

    -- nerdtree
    NERDTreeDir       { fg = colors.aqua },
    NERDTreeDirSlash  { fg = colors.aqua },
    NERDTreeOpenable  { fg = colors.orange },
    NERDTreeClosable  { fg = colors.orange },
    NERDTreeFile      { fg = colors.light1 },
    NERDTreeExecFile  { fg = colors.yellow },
    NERDTreeUp        { fg = colors.light4 },
    NERDTreeCWD       { fg = colors.green },
    NERDTreeHelp      { fg = colors.light1 },
    NERDTreeToggleOn  { fg = colors.green },
    NERDTreeToggleOff { fg = colors.red },

    -- coc.nvim
    CocErrorSign          { fg = colors.red, bg = colors.dark1 },
    CocWarningSign        { fg = colors.orange, bg = colors.dark1 },
    CocInfoSign           { fg = colors.blue, bg = colors.dark1 },
    CocHintSign           { fg = colors.aqua, bg = colors.dark1 },
    CocErrorFloat         { fg = colors.red },
    CocWarningFloat       { fg = colors.orange },
    CocInfoFloat          { fg = colors.blue },
    CocHintFloat          { fg = colors.aqua },
    CocDiagnosticsError   { fg = colors.red },
    CocDiagnosticsWarning { fg = colors.orange },
    CocDiagnosticsInfo    { fg = colors.blue },
    CocDiagnosticsHint    { fg = colors.aqua },
    CocSelectedText       { fg = colors.red },
    CocMenuSel            { PmenuSel },
    CocCodeLens           { fg = colors.light4 },
    CocErrorHighlight     { gui = "underline", guisp = colors.red },
    CocWarningHighlight   { gui = "underline", guisp = colors.orange },
    CocInfoHighlight      { gui = "underline", guisp = colors.blue },
    CocHintHighlight      { gui = "underline", guisp = colors.aqua },

    -- telescope.nvim
    TelescopeNormal         { fg = colors.light1 },
    TelescopeSelection      { fg = colors.yellow, gui = "bold" },
    TelescopeSelectionCaret { fg = colors.red },
    TelescopeMultiSelection { fg = colors.light4 },
    TelescopeBorder         { TelescopeNormal },
    TelescopePromptBorder   { TelescopeNormal },
    TelescopeResultsBorder  { TelescopeNormal },
    TelescopePreviewBorder  { TelescopeNormal },
    TelescopeMatching       { fg = colors.blue },
    TelescopePromptPrefix   { fg = colors.red },
    TelescopePrompt         { TelescopeNormal },

    -- nvim-cmp
    CmpItemAbbr              { fg = colors.light1 },
    CmpItemAbbrDeprecated    { fg = colors.light1 },
    CmpItemAbbrMatch         { fg = colors.blue, gui = "bold" },
    CmpItemAbbrMatchFuzzy    { gui = "underline", guisp = colors.blue },
    CmpItemMenu              { fg = colors.light4 },
    CmpItemKindText          { fg = colors.orange },
    CmpItemKindVariable      { fg = colors.orange },
    CmpItemKindMethod        { fg = colors.blue },
    CmpItemKindFunction      { fg = colors.blue },
    CmpItemKindConstructor   { fg = colors.yellow },
    CmpItemKindUnit          { fg = colors.blue },
    CmpItemKindField         { fg = colors.blue },
    CmpItemKindClass         { fg = colors.yellow },
    CmpItemKindInterface     { fg = colors.yellow },
    CmpItemKindModule        { fg = colors.blue },
    CmpItemKindProperty      { fg = colors.blue },
    CmpItemKindValue         { fg = colors.orange },
    CmpItemKindEnum          { fg = colors.yellow },
    CmpItemKindOperator      { fg = colors.yellow },
    CmpItemKindKeyword       { fg = colors.purple },
    CmpItemKindEvent         { fg = colors.purple },
    CmpItemKindReference     { fg = colors.purple },
    CmpItemKindColor         { fg = colors.purple },
    CmpItemKindSnippet       { fg = colors.green },
    CmpItemKindFile          { fg = colors.blue },
    CmpItemKindFolder        { fg = colors.blue },
    CmpItemKindEnumMember    { fg = colors.aqua },
    CmpItemKindConstant      { fg = colors.orange },
    CmpItemKindStruct        { fg = colors.yellow },
    CmpItemKindTypeParameter { fg = colors.yellow },

    -- navic (highlight icons)
    NavicIconsFile          { fg = colors.blue },
    NavicIconsModule        { fg = colors.orange },
    NavicIconsNamespace     { fg = colors.blue },
    NavicIconsPackage       { fg = colors.aqua },
    NavicIconsClass         { fg = colors.yellow },
    NavicIconsMethod        { fg = colors.blue },
    NavicIconsProperty      { fg = colors.aqua },
    NavicIconsField         { fg = colors.purple },
    NavicIconsConstructor   { fg = colors.blue },
    NavicIconsEnum          { fg = colors.purple },
    NavicIconsInterface     { fg = colors.green },
    NavicIconsFunction      { fg = colors.blue },
    NavicIconsVariable      { fg = colors.purple },
    NavicIconsConstant      { fg = colors.orange },
    NavicIconsString        { fg = colors.green },
    NavicIconsNumber        { fg = colors.orange },
    NavicIconsBoolean       { fg = colors.orange },
    NavicIconsArray         { fg = colors.orange },
    NavicIconsObject        { fg = colors.orange },
    NavicIconsKey           { fg = colors.aqua },
    NavicIconsNull          { fg = colors.orange },
    NavicIconsEnumMember    { fg = colors.yellow },
    NavicIconsStruct        { fg = colors.purple },
    NavicIconsEvent         { fg = colors.yellow },
    NavicIconsOperator      { fg = colors.red },
    NavicIconsTypeParameter { fg = colors.red },
    NavicText               { fg = colors.light1 },
    NavicSeparator          { fg = colors.light1 },

    -- html
    htmlTag                 { fg = colors.aqua, gui = "bold" },
    htmlEndTag              { fg = colors.aqua, gui = "bold" },
    htmlTagName             { fg = colors.blue },
    htmlArg                 { fg = colors.orange },
    htmlTagN                { fg = colors.light1 },
    htmlSpecialTagName      { fg = colors.blue },
    htmlLink                { fg = colors.light3, gui = "underline" },
    htmlSpecialChar         { fg = colors.red },
    htmlBold                { fg = colors.light1, bg = colors.dark1, gui = "bold" },
    htmlBoldUnderline       { fg = colors.light1, bg = colors.dark1, gui = "bold,underline" },
    htmlBoldItalic          { fg = colors.light1, bg = colors.dark1, gui = "bold,italic" },
    htmlBoldUnderlineItalic { fg = colors.light1, bg = colors.dark1, gui = "bold,italic,underline" },
    htmlUnderline           { fg = colors.light1, bg = colors.dark1, gui = "underline" },
    htmlUnderlineItalic     { fg = colors.light1, bg = colors.dark1, gui = "italic,underline" },
    htmlItalic              { fg = colors.light1, bg = colors.dark1, gui = "italic" },

    -- xml
    xmlTag               { fg = colors.aqua, gui = "bold" },
    xmlEndTag            { fg = colors.aqua, gui = "bold" },
    xmlTagName           { fg = colors.blue },
    xmlEqual             { fg = colors.blue },
    docbkKeyword         { fg = colors.aqua, gui = "bold" },
    xmlDocTypeDecl       { fg = colors.light4 },
    xmlDocTypeKeyword    { fg = colors.purple },
    xmlCdataStart        { fg = colors.light4 },
    xmlCdataCdata        { fg = colors.purple },
    dtdFunction          { fg = colors.light4 },
    dtdTagName           { fg = colors.purple },
    xmlAttrib            { fg = colors.orange },
    xmlProcessingDelim   { fg = colors.light4 },
    dtdParamEntityPunct  { fg = colors.light4 },
    dtdParamEntityDPunct { fg = colors.light4 },
    xmlAttribPunct       { fg = colors.light4 },
    xmlEntity            { fg = colors.red },
    xmlEntityPunct       { fg = colors.red },

    -- clojure
    clojureKeyword          { fg = colors.blue },
    clojureCond             { fg = colors.orange },
    clojureSpecial          { fg = colors.orange },
    clojureDefine           { fg = colors.orange },
    clojureFunc             { fg = colors.yellow },
    clojureRepeat           { fg = colors.yellow },
    clojureCharacter        { fg = colors.aqua },
    clojureStringEscape     { fg = colors.aqua },
    clojureException        { fg = colors.red },
    clojureRegexp           { fg = colors.aqua },
    clojureRegexpEscape     { fg = colors.aqua },
    clojureRegexpCharClass  { fg = colors.light2, gui = "bold" },
    clojureRegexpMod        { clojureRegexpCharClass },
    clojureRegexpQuantifier { clojureRegexpCharClass },
    clojureParen            { fg = colors.light2 },
    clojureAnonArg          { fg = colors.yellow },
    clojureVariable         { fg = colors.blue },
    clojureMacro            { fg = colors.orange },
    clojureMeta             { fg = colors.yellow },
    clojureDeref            { fg = colors.yellow },
    clojureQuote            { fg = colors.yellow },
    clojureUnquote          { fg = colors.yellow },

    -- C
    cOperator   { fg = colors.purple },
    cppOperator { fg = colors.purple },
    cStructure  { fg = colors.orange },

    -- python
    pythonBuiltin     { fg = colors.orange },
    pythonBuiltinObj  { fg = colors.orange },
    pythonBuiltinFunc { fg = colors.orange },
    pythonFunction    { fg = colors.aqua },
    pythonDecorator   { fg = colors.red },
    pythonInclude     { fg = colors.blue },
    pythonImport      { fg = colors.blue },
    pythonRun         { fg = colors.blue },
    pythonCoding      { fg = colors.blue },
    pythonOperator    { fg = colors.red },
    pythonException   { fg = colors.red },
    pythonExceptions  { fg = colors.purple },
    pythonBoolean     { fg = colors.purple },
    pythonDot         { fg = colors.light2 },
    pythonConditional { fg = colors.red },
    pythonRepeat      { fg = colors.red },
    pythonDottedName  { fg = colors.green, gui = "bold" },

    -- CSS
    cssBraces               { fg = colors.blue },
    cssFunctionName         { fg = colors.yellow },
    cssIdentifier           { fg = colors.orange },
    cssClassName            { fg = colors.green },
    cssColor                { fg = colors.blue },
    cssSelectorOp           { fg = colors.blue },
    cssSelectorOp2          { fg = colors.blue },
    cssImportant            { fg = colors.green },
    cssVendor               { fg = colors.light1 },
    cssTextProp             { fg = colors.aqua },
    cssAnimationProp        { fg = colors.aqua },
    cssUIProp               { fg = colors.yellow },
    cssTransformProp        { fg = colors.aqua },
    cssTransitionProp       { fg = colors.aqua },
    cssPrintProp            { fg = colors.aqua },
    cssPositioningProp      { fg = colors.yellow },
    cssBoxProp              { fg = colors.aqua },
    cssFontDescriptorProp   { fg = colors.aqua },
    cssFlexibleBoxProp      { fg = colors.aqua },
    cssBorderOutlineProp    { fg = colors.aqua },
    cssBackgroundProp       { fg = colors.aqua },
    cssMarginProp           { fg = colors.aqua },
    cssListProp             { fg = colors.aqua },
    cssTableProp            { fg = colors.aqua },
    cssFontProp             { fg = colors.aqua },
    cssPaddingProp          { fg = colors.aqua },
    cssDimensionProp        { fg = colors.aqua },
    cssRenderProp           { fg = colors.aqua },
    cssColorProp            { fg = colors.aqua },
    cssGeneratedContentProp { fg = colors.aqua },

    -- javascript
    javaScriptBraces     { fg = colors.light1 },
    javaScriptFunction   { fg = colors.aqua },
    javaScriptIdentifier { fg = colors.red },
    javaScriptMember     { fg = colors.blue },
    javaScriptNumber     { fg = colors.purple },
    javaScriptNull       { fg = colors.purple },
    javaScriptParens     { fg = colors.light2 },

    -- typescript
    typescriptReserved               { fg = colors.aqua },
    typescriptLabel                  { fg = colors.aqua },
    typescriptFuncKeyword            { fg = colors.aqua },
    typescriptIdentifier             { fg = colors.orange },
    typescriptBraces                 { fg = colors.light1 },
    typescriptEndColons              { fg = colors.light1 },
    typescriptDOMObjects             { fg = colors.light1 },
    typescriptAjaxMethods            { fg = colors.light1 },
    typescriptLogicSymbols           { fg = colors.light1 },
    typescriptDocSeeTag              { Comment },
    typescriptDocParam               { Comment },
    typescriptDocTags                { Comment },
    typescriptGlobalObjects          { fg = colors.light1 },
    typescriptParens                 { fg = colors.light2 },
    typescriptOpSymbols              { fg = colors.light2 },
    typescriptHtmlElemProperties     { fg = colors.light1 },
    typescriptNull                   { fg = colors.purple },
    typescriptInterpolationDelimiter { fg = colors.aqua },

    -- purescript
    purescriptModuleKeyword { fg = colors.aqua },
    purescriptModuleName    { fg = colors.light1 },
    purescriptWhere         { fg = colors.aqua },
    purescriptDelimiter     { fg = colors.light3 },
    purescriptType          { fg = colors.light1 },
    purescriptImportKeyword { fg = colors.aqua },
    purescriptHidingKeyword { fg = colors.aqua },
    purescriptAsKeyword     { fg = colors.aqua },
    purescriptStructure     { fg = colors.aqua },
    purescriptOperator      { fg = colors.blue },
    purescriptTypeVar       { fg = colors.light1 },
    purescriptConstructor   { fg = colors.light1 },
    purescriptFunction      { fg = colors.light1 },
    purescriptConditional   { fg = colors.orange },
    purescriptBacktick      { fg = colors.orange },

    -- coffescript
    coffeeExtendedOp { fg = colors.light2 },
    coffeeSpecialOp  { fg = colors.light2 },
    coffeeCurly      { fg = colors.orange },
    coffeeParen      { fg = colors.light2 },
    coffeeBracket    { fg = colors.orange },

    -- ruby
    rubyStringDelimiter { fg = colors.green },
    rubyInterpolationDelimiter { fg = colors.aqua },
    rubyDefinedOperator { fg = colors.aqua },

    -- objc
    objcTypeModifier { fg = colors.red },
    objcDirective { fg = colors.blue },

    -- go
    goDirective   { fg = colors.aqua },
    goConstants   { fg = colors.purple },
    goDeclaration { fg = colors.red },
    goDeclType    { fg = colors.blue },
    goBuiltins    { fg = colors.orange },

    -- lua
    luaIn       { fg = colors.red },
    luaFunction { fg = colors.aqua },
    luaTable    { fg = colors.orange },

    -- moonscript
    moonSpecialOp  { fg = colors.light2 },
    moonExtendedOp { fg = colors.light2 },
    moonFunction   { fg = colors.light2 },
    moonObject     { fg = colors.yellow },

    -- java
    javaAnnotation   { fg = colors.blue },
    javaDocTags      { fg = colors.aqua },
    javaCommentTitle { Comment },
    javaParen        { fg = colors.light2 },
    javaParen1       { fg = colors.light2 },
    javaParen2       { fg = colors.light2 },
    javaParen3       { fg = colors.light2 },
    javaParen4       { fg = colors.light2 },
    javaParen5       { fg = colors.light2 },
    javaOperator     { fg = colors.orange },
    javaVarArg       { fg = colors.green },

    -- elixir
    elixirDocString              { Comment },
    elixirStringDelimiter        { fg = colors.green },
    elixirInterpolationDelimiter { fg = colors.aqua },
    elixirModuleDeclaration      { fg = colors.yellow },

    -- scala
    scalaNameDefinition          { fg = colors.light1 },
    scalaCaseFollowing           { fg = colors.light1 },
    scalaCapitalWord             { fg = colors.light1 },
    scalaTypeExtension           { fg = colors.light1 },
    scalaKeyword                 { fg = colors.red },
    scalaKeywordModifier         { fg = colors.red },
    scalaSpecial                 { fg = colors.aqua },
    scalaOperator                { fg = colors.light1 },
    scalaTypeDeclaration         { fg = colors.yellow },
    scalaTypeTypePostDeclaration { fg = colors.yellow },
    scalaInstanceDeclaration     { fg = colors.light1 },
    scalaInterpolation           { fg = colors.aqua },

    -- markdown
    markdownItalic            { fg = colors.light2, gui = "italic" },
    markdownBold              { fg = colors.light2, gui = "bold" },
    markdownBoldItalic        { fg = colors.light2, gui = "italic,bold" },
    markdownH1                { fg = colors.green, gui = "bold" },
    markdownH2                { fg = colors.green, gui = "bold" },
    markdownH3                { fg = colors.yellow, gui = "bold" },
    markdownH4                { fg = colors.yellow, gui = "bold" },
    markdownH5                { fg = colors.yellow },
    markdownH6                { fg = colors.yellow },
    markdownCode              { fg = colors.aqua },
    markdownCodeBlock         { fg = colors.aqua },
    markdownCodeDelimiter     { fg = colors.aqua },
    markdownBlockquote        { fg = colors.light4 },
    markdownListMarker        { fg = colors.light4 },
    markdownOrderedListMarker { fg = colors.light4 },
    markdownRule              { fg = colors.light4 },
    markdownHeadingRule       { fg = colors.light4 },
    markdownUrlDelimiter      { fg = colors.light2 },
    markdownLinkDelimiter     { fg = colors.light2 },
    markdownLinkTextDelimiter { fg = colors.light2 },
    markdownHeadingDelimiter  { fg = colors.orange },
    markdownUrl               { fg = colors.purple },
    markdownUrlTitleDelimiter { fg = colors.green },
    markdownLinkText          { fg = colors.light4, gui = "underline" },
    markdownIdDeclaration     { markdownLinkText },

    -- haskell
    haskellType            { fg = colors.blue },
    haskellIdentifier      { fg = colors.aqua },
    haskellSeparator       { fg = colors.light3 },
    haskellDelimiter       { fg = colors.orange },
    haskellOperators       { fg = colors.purple },
    haskellBacktick        { fg = colors.orange },
    haskellStatement       { fg = colors.purple },
    haskellConditional     { fg = colors.purple },
    haskellLet             { fg = colors.red },
    haskellDefault         { fg = colors.red },
    haskellWhere           { fg = colors.red },
    haskellBottom          { fg = colors.red, gui = "bold" },
    haskellImportKeywords  { fg = colors.purple, gui = "bold" },
    haskellDeclKeyword     { fg = colors.orange },
    haskellDecl            { fg = colors.orange },
    haskellDeriving        { fg = colors.purple },
    haskellAssocType       { fg = colors.aqua },
    haskellNumber          { fg = colors.aqua },
    haskellPragma          { fg = colors.red, gui = "bold" },
    haskellTH              { fg = colors.aqua, gui = "bold" },
    haskellForeignKeywords { fg = colors.green },
    haskellKeyword         { fg = colors.red },
    haskellFloat           { fg = colors.aqua },
    haskellInfix           { fg = colors.purple },
    haskellQuote           { fg = colors.green, gui = "bold" },
    haskellShebang         { fg = colors.yellow, gui = "bold" },
    haskellLiquid          { fg = colors.purple, gui = "bold" },
    haskellQuasiQuoted     { fg = colors.blue, gui = "bold" },
    haskellRecursiveDo     { fg = colors.purple },
    haskellQuotedType      { fg = colors.red },
    haskellPreProc         { fg = colors.light3 },
    haskellTypeRoles       { fg = colors.red, gui = "bold" },
    haskellTypeForall      { fg = colors.red },
    haskellPatternKeyword  { fg = colors.blue },

    -- json
    jsonKeyword { fg = colors.green },
    jsonQuote   { fg = colors.green },
    jsonBraces  { fg = colors.light1 },
    jsonString  { fg = colors.light1 },

    -- mail
    mailQuoted1   { fg = colors.aqua },
    mailQuoted2   { fg = colors.purple },
    mailQuoted3   { fg = colors.yellow },
    mailQuoted4   { fg = colors.green },
    mailQuoted5   { fg = colors.red },
    mailQuoted6   { fg = colors.orange },
    mailSignature { Comment },

    -- c#
    csBraces                 { fg = colors.light1 },
    csEndColon               { fg = colors.light1 },
    csLogicSymbols           { fg = colors.light1 },
    csParens                 { fg = colors.light2 },
    csOpSymbols              { fg = colors.light2 },
    csInterpolationDelimiter { fg = colors.light2 },
    csInterpolationAlignDel  { fg = colors.aqua, gui = "bold" },
    csInterpolationFormat    { fg = colors.aqua },
    csInterpolationFormatDel { fg = colors.aqua, gui = "bold" },

    -- rust
    rustSigil              { fg = colors.orange },
    rustEscape             { fg = colors.aqua },
    rustStringContinuation { fg = colors.aqua },
    rustEnum               { fg = colors.aqua },
    rustStructure          { fg = colors.aqua },
    rustModPathSep         { fg = colors.light1 },
    rustCommentLineDoc     { Comment },
    rustDefault            { fg = colors.aqua },

    -- ocaml
    ocamlOperator       { fg = colors.light1 },
    ocamlKeyChar        { fg = colors.orange },
    ocamlArrow          { fg = colors.orange },
    ocamlInfixOpKeyword { fg = colors.red },
    ocamlConstructor    { fg = colors.orange },

    -- lspsaga.nvim
    LspSagaCodeActionTitle     { Title },
    LspSagaCodeActionBorder    { fg = colors.light1 },
    LspSagaCodeActionContent   { fg = colors.green, gui = "bold" },
    LspSagaLspFinderBorder     { fg = colors.light1 },
    LspSagaAutoPreview         { fg = colors.orange },
    TargetWord                 { fg = colors.blue, gui = "bold" },
    FinderSeparator            { fg = colors.aqua },
    LspSagaDefPreviewBorder    { fg = colors.blue },
    LspSagaHoverBorder         { fg = colors.orange },
    LspSagaRenameBorder        { fg = colors.blue },
    LspSagaDiagnosticSource    { fg = colors.orange },
    LspSagaDiagnosticBorder    { fg = colors.purple },
    LspSagaDiagnosticHeader    { fg = colors.green },
    LspSagaSignatureHelpBorder { fg = colors.green },
    SagaShadow                 { fg = colors.dark2 },

    -- dashboard-nvim
    DashboardShortCut { fg = colors.orange },
    DashboardHeader   { fg = colors.aqua },
    DashboardCenter   { fg = colors.yellow },
    DashboardFooter   { fg = colors.purple, gui = "italic" },

    -- mason
    MasonHighlight                   { fg = colors.aqua },
    MasonHighlightBlock              { fg = colors.black, bg = colors.blue },
    MasonHighlightBlockBold          { fg = colors.black, bg = colors.blue, gui = "bold" },
    MasonHighlightSecondary          { fg = colors.yellow },
    MasonHighlightBlockSecondary     { fg = colors.black, bg = colors.yellow },
    MasonHighlightBlockBoldSecondary { fg = colors.black, bg = colors.yellow, gui = "bold" },
    MasonHeader                      { MasonHighlightBlockBoldSecondary },
    MasonHeaderSecondary             { MasonHighlightBlockBold },
    MasonMuted                       { fg = colors.light3 },
    MasonMutedBlock                  { fg = colors.black, bg = colors.light3 },
    MasonMutedBlockBold              { fg = colors.black, bg = colors.light3, gui = "bold" },

    -- lsp-inlayhints.nvim
    LspInlayHint { Comment },

    -- carbon.nvim
    CarbonFile          { fg = colors.light1 },
    CarbonExe           { fg = colors.yellow },
    CarbonSymlink       { fg = colors.aqua },
    CarbonBrokenSymlink { fg = colors.red },
    CarbonIndicator     { fg = colors.light4 },
    CarbonDanger        { fg = colors.red },
    CarbonPending       { fg = colors.yellow },

    -- notify.nvim
    NotifyDEBUGBorder { fg = colors.blue },
    NotifyDEBUGIcon   { fg = colors.blue },
    NotifyDEBUGTitle  { fg = colors.blue },
    NotifyERRORBorder { fg = colors.red },
    NotifyERRORIcon   { fg = colors.red },
    NotifyERRORTitle  { fg = colors.red },
    NotifyINFOBorder  { fg = colors.aqua },
    NotifyINFOIcon    { fg = colors.aqua },
    NotifyINFOTitle   { fg = colors.aqua },
    NotifyTRACEBorder { fg = colors.green },
    NotifyTRACEIcon   { fg = colors.green },
    NotifyTRACETitle  { fg = colors.green },
    NotifyWARNBorder  { fg = colors.yellow },
    NotifyWARNIcon    { fg = colors.yellow },
    NotifyWARNTitle   { fg = colors.yellow },

    -- nvim-ts-rainbow2
    TSRainbowRed    { fg = colors.red },
    TSRainbowYellow { fg = colors.yellow },
    TSRainbowBlue   { fg = colors.blue },
    TSRainbowOrange { fg = colors.orange },
    TSRainbowGreen  { fg = colors.green },
    TSRainbowViolet { fg = colors.purple },
    TSRainbowCyan   { fg = colors.aqua },

    CommentYellow { fg = colors.yellow, bg = colors.shaded_yellow },
    CommentRed    { fg = colors.red, bg = colors.shaded_red },
    CommentBlue   { fg = colors.blue, bg = colors.shaded_blue },
    CommentCyan   { fg = colors.aqua, bg = colors.shaded_aqua },
    CommentPurple { fg = colors.purple, bg = colors.shaded_purple },
    CommentGreen  { fg = colors.green, bg = colors.shaded_green },
    CommentWhite  { fg = colors.light1, bg = colors.dark3, gui = "bold" },

    IndentBlanklineChar        { fg = colors.dark2 },
    IndentBlanklineContextChar { fg = colors.light4, gui = "nocombine" },

    -- -- voldikss/vim-floaterm
    FloatermBorder { bg = colors.dark1, fg = colors.light1 },

    -- Neogit
    -- NeogitNotificationInfo     { fg = "#80ff95" },
    -- NeogitNotificationWarning  { fg = "#fff454" },
    -- NeogitNotificationError    { fg = "#c44323" },
    -- NeogitDiffAddHighlight     { bg = "#404040", fg="#859900" },
    -- NeogitDiffDeleteHighlight  { bg = "#404040", fg="#dc322f" },
    -- NeogitDiffContextHighlight { bg = "#333333", fg="#b2b2b2" },
    -- NeogitDiffContext          { bg = "#262626", fg="#b2b2b2" },
    -- NeogitHunkHeader           { bg = "#cccccc", fg="#404040" },
    -- NeogitHunkHeaderHighlight  { bg = "#cccccc", fg="#4d4d4d" },

    -- rainbow-delimiters.nvim
    RainbowDelimiterRed    { fg = colors.red },
    RainbowDelimiterYellow { fg = colors.yellow },
    RainbowDelimiterBlue   { fg = colors.blue },
    RainbowDelimiterOrange { fg = colors.orange },
    RainbowDelimiterGreen  { fg = colors.green },
    RainbowDelimiterViolet { fg = colors.purple },
    RainbowDelimiterCyan   { fg = colors.aqua },
  }
end)

-- Set cursor colors
vim.cmd('set guicursor=n-c:block-Cursor')
-- vim.cmd('set guicursor+=i-ci-ve:ver25-ICursor')
vim.cmd('set guicursor+=i-ci-ve:block-ICursor')
vim.cmd('set guicursor+=r-cr-o:block-RCursor')
vim.cmd('set guicursor+=v:block-VCursor')
vim.cmd('set guicursor+=a:blinkon0')

-- Return our parsed theme for extension or use elsewhere.
return M

-- vi:nowrap

